import fhirpathpy.engine.invocations.collections as collections
import fhirpathpy.engine.invocations.existence as existence
import fhirpathpy.engine.invocations.filtering as filtering
import fhirpathpy.engine.invocations.strings as strings
import fhirpathpy.engine.invocations.combining as combining
import fhirpathpy.engine.invocations.math as math
import fhirpathpy.engine.invocations.equality as equality
import fhirpathpy.engine.invocations.logic as logic

invocations = {
    "empty": {"fn": existence.emptyFn},
    "not": {"fn": existence.notFn},
    # 'exists':       {'fn': existence.existsMacro,   'arity': {0: [], 1: ["Expr"]}},
    # 'all':          {'fn': existence.allMacro,      'arity': {1: ["Expr"]}},
    # 'allTrue':      {'fn': existence.allTrueFn},
    # 'anyTrue':      {'fn': existence.anyTrueFn},
    # 'allFalse':     {'fn': existence.allFalseFn},
    # 'anyFalse':     {'fn': existence.anyFalseFn},
    # 'subsetOf':     {'fn': existence.subsetOfFn,    'arity': {1: ["AnyAtRoot"]}},
    # 'supersetOf':   {'fn': existence.supersetOfFn,  'arity': {1: ["AnyAtRoot"]}},
    "isDistinct": {"fn": existence.isDistinctFn},
    "distinct": {"fn": existence.distinctFn},
    "count": {"fn": existence.countFn},
    "where": {"fn": filtering.whereMacro, "arity": {1: ["Expr"]}},
    "select": {"fn": filtering.selectMacro, "arity": {1: ["Expr"]}},
    "single": {"fn": filtering.singleFn},
    "first": {"fn": filtering.firstFn},
    "last": {"fn": filtering.lastFn},
    "ofType": {"fn": filtering.ofTypeFn, "arity": {1: ["Identifier"]}},
    "tail": {"fn": filtering.tailFn},
    "take": {"fn": filtering.takeFn, "arity": {1: ["Integer"]}},
    "skip": {"fn": filtering.skipFn, "arity": {1: ["Integer"]}},
    "combine": {"fn": combining.combineFn, "arity": {1: ["AnyAtRoot"]}},
    # iif:          {fn: misc.iifMacro,    arity: {3: ["Expr", "Expr", "Expr"]}},
    # trace:        {fn: misc.traceFn,     arity: {0: [], 1: ["String"]}},
    # toInteger:    {fn: misc.toInteger},
    # toDecimal:    {fn: misc.toDecimal},
    # toString:     {fn: misc.toString},
    # toDateTime:   {fn: misc.toDateTime},
    # toTime:       {fn: misc.toTime},
    "indexOf": {"fn": strings.indexOf, "arity": {1: ["String"]}},
    "substring": {
        "fn": strings.substring,
        "arity": {1: ["Integer"], 2: ["Integer", "Integer"]},
    },
    "startsWith": {"fn": strings.startsWith, "arity": {1: ["String"]}},
    "endsWith": {"fn": strings.endsWith, "arity": {1: ["String"]}},
    "contains": {"fn": strings.containsFn, "arity": {1: ["String"]}},
    "replace": {"fn": strings.replace, "arity": {2: ["String", "String"]}},
    "matches": {"fn": strings.matches, "arity": {1: ["String"]}},
    "replaceMatches": {
        "fn": strings.replaceMatches,
        "arity": {2: ["String", "String"]},
    },
    "length": {"fn": strings.length},
    "abs": {"fn": math.abs},
    "ceiling": {"fn": math.ceiling},
    "exp": {"fn": math.exp},
    "floor": {"fn": math.floor},
    "ln": {"fn": math.ln},
    "log": {"fn": math.log, "arity": {1: ["Number"]}, "nullable": True},
    "power": {"fn": math.power, "arity": {1: ["Number"]}, "nullable": True},
    "round": {"fn": math.rround, "arity": {1: ["Number"]}},
    "sqrt": {"fn": math.sqrt},
    "truncate": {"fn": math.truncate},
    # now:            {fn: datetime.now },
    # today:          {fn: datetime.today },
    # repeat:          {fn: filtering.repeatMacro, arity: {1: ["Expr"]}},
    # children:        {fn: navigation.children },
    # descendants:     {fn: navigation.descendants },
    # "|":          {fn: combining.unionOp,   arity: {2: ["Any", "Any"]}},
    "=": {"fn": equality.equal, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "!=": {"fn": equality.unequal, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "~": {"fn": equality.equival, "arity": {2: ["Any", "Any"]}},
    "!~": {"fn": equality.unequival, "arity": {2: ["Any", "Any"]}},
    "<": {"fn": equality.lt, "arity": {2: ["Any", "Any"]}, "nullable": True},
    ">": {"fn": equality.gt, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "<=": {"fn": equality.lte, "arity": {2: ["Any", "Any"]}, "nullable": True},
    ">=": {"fn": equality.gte, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "containsOp": {"fn": collections.contains, "arity": {2: ["Any", "Any"]}},
    "inOp": {"fn": collections.inn, "arity": {2: ["Any", "Any"]}},
    "&": {"fn": math.amp, "arity": {2: ["String", "String"]}},
    "+": {"fn": math.plus, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "-": {"fn": math.minus, "arity": {2: ["Any", "Any"]}, "nullable": True},
    "*": {"fn": math.mul, "arity": {2: ["Number", "Number"]}, "nullable": True},
    "/": {"fn": math.div, "arity": {2: ["Number", "Number"]}, "nullable": True},
    "mod": {"fn": math.mod, "arity": {2: ["Number", "Number"]}, "nullable": True},
    "div": {"fn": math.intdiv, "arity": {2: ["Number", "Number"]}, "nullable": True},
    "or": {"fn": logic.orOp, "arity": {2: [["Boolean"], ["Boolean"]]}},
    "and": {"fn": logic.andOp, "arity": {2: [["Boolean"], ["Boolean"]]}},
    "xor": {"fn": logic.xorOp, "arity": {2: [["Boolean"], ["Boolean"]]}},
    "implies": {"fn": logic.impliesOp, "arity": {2: [["Boolean"], ["Boolean"]]}},
}
